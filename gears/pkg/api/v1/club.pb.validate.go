// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: club.proto

package gears

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PingResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingResponseMultiError, or
// nil if none found.
func (m *PingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return PingResponseMultiError(errors)
	}

	return nil
}

// PingResponseMultiError is an error wrapping multiple validation errors
// returned by PingResponse.ValidateAll() if the designated constraints aren't met.
type PingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingResponseMultiError) AllErrors() []error { return m }

// PingResponseValidationError is the validation error returned by
// PingResponse.Validate if the designated constraints aren't met.
type PingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingResponseValidationError) ErrorName() string { return "PingResponseValidationError" }

// Error satisfies the builtin error interface
func (e PingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingResponseValidationError{}

// Validate checks the field values on CRUDResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CRUDResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CRUDResult with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CRUDResultMultiError, or
// nil if none found.
func (m *CRUDResult) ValidateAll() error {
	return m.validate(true)
}

func (m *CRUDResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RowsAffected

	if len(errors) > 0 {
		return CRUDResultMultiError(errors)
	}

	return nil
}

// CRUDResultMultiError is an error wrapping multiple validation errors
// returned by CRUDResult.ValidateAll() if the designated constraints aren't met.
type CRUDResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CRUDResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CRUDResultMultiError) AllErrors() []error { return m }

// CRUDResultValidationError is the validation error returned by
// CRUDResult.Validate if the designated constraints aren't met.
type CRUDResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CRUDResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CRUDResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CRUDResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CRUDResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CRUDResultValidationError) ErrorName() string { return "CRUDResultValidationError" }

// Error satisfies the builtin error interface
func (e CRUDResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCRUDResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CRUDResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CRUDResultValidationError{}

// Validate checks the field values on MemberInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemberInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemberInfoMultiError, or
// nil if none found.
func (m *MemberInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemberId

	if l := utf8.RuneCountInString(m.GetFullName()); l < 2 || l > 100 {
		err := MemberInfoValidationError{
			field:  "FullName",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if t := m.GetBirthday(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = MemberInfoValidationError{
				field:  "Birthday",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			now := time.Now()
			within := time.Duration(3153600000*time.Second + 0*time.Nanosecond)

			if ts.Sub(now) >= 0 || ts.Sub(now.Add(-within)) < 0 {
				err := MemberInfoValidationError{
					field:  "Birthday",
					reason: "value must be less than now within 876000h0m0s",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return MemberInfoMultiError(errors)
	}

	return nil
}

// MemberInfoMultiError is an error wrapping multiple validation errors
// returned by MemberInfo.ValidateAll() if the designated constraints aren't met.
type MemberInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberInfoMultiError) AllErrors() []error { return m }

// MemberInfoValidationError is the validation error returned by
// MemberInfo.Validate if the designated constraints aren't met.
type MemberInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberInfoValidationError) ErrorName() string { return "MemberInfoValidationError" }

// Error satisfies the builtin error interface
func (e MemberInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberInfoValidationError{}

// Validate checks the field values on MemberCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberCreateRequestMultiError, or nil if none found.
func (m *MemberCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberCreateRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberCreateRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberCreateRequestValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MemberCreateRequestMultiError(errors)
	}

	return nil
}

// MemberCreateRequestMultiError is an error wrapping multiple validation
// errors returned by MemberCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type MemberCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberCreateRequestMultiError) AllErrors() []error { return m }

// MemberCreateRequestValidationError is the validation error returned by
// MemberCreateRequest.Validate if the designated constraints aren't met.
type MemberCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberCreateRequestValidationError) ErrorName() string {
	return "MemberCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MemberCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberCreateRequestValidationError{}

// Validate checks the field values on MemberCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberCreateResponseMultiError, or nil if none found.
func (m *MemberCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCrudResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberCreateResponseValidationError{
					field:  "CrudResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberCreateResponseValidationError{
					field:  "CrudResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrudResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberCreateResponseValidationError{
				field:  "CrudResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MemberId

	if len(errors) > 0 {
		return MemberCreateResponseMultiError(errors)
	}

	return nil
}

// MemberCreateResponseMultiError is an error wrapping multiple validation
// errors returned by MemberCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type MemberCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberCreateResponseMultiError) AllErrors() []error { return m }

// MemberCreateResponseValidationError is the validation error returned by
// MemberCreateResponse.Validate if the designated constraints aren't met.
type MemberCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberCreateResponseValidationError) ErrorName() string {
	return "MemberCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MemberCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberCreateResponseValidationError{}

// Validate checks the field values on MemberUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberUpdateRequestMultiError, or nil if none found.
func (m *MemberUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberUpdateRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberUpdateRequestValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberUpdateRequestValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MemberUpdateRequestMultiError(errors)
	}

	return nil
}

// MemberUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by MemberUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type MemberUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberUpdateRequestMultiError) AllErrors() []error { return m }

// MemberUpdateRequestValidationError is the validation error returned by
// MemberUpdateRequest.Validate if the designated constraints aren't met.
type MemberUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberUpdateRequestValidationError) ErrorName() string {
	return "MemberUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MemberUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberUpdateRequestValidationError{}

// Validate checks the field values on MemberUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberUpdateResponseMultiError, or nil if none found.
func (m *MemberUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCrudResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberUpdateResponseValidationError{
					field:  "CrudResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberUpdateResponseValidationError{
					field:  "CrudResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrudResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberUpdateResponseValidationError{
				field:  "CrudResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MemberUpdateResponseMultiError(errors)
	}

	return nil
}

// MemberUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by MemberUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type MemberUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberUpdateResponseMultiError) AllErrors() []error { return m }

// MemberUpdateResponseValidationError is the validation error returned by
// MemberUpdateResponse.Validate if the designated constraints aren't met.
type MemberUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberUpdateResponseValidationError) ErrorName() string {
	return "MemberUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MemberUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberUpdateResponseValidationError{}

// Validate checks the field values on MemberDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberDeleteRequestMultiError, or nil if none found.
func (m *MemberDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemberId

	if len(errors) > 0 {
		return MemberDeleteRequestMultiError(errors)
	}

	return nil
}

// MemberDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by MemberDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type MemberDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberDeleteRequestMultiError) AllErrors() []error { return m }

// MemberDeleteRequestValidationError is the validation error returned by
// MemberDeleteRequest.Validate if the designated constraints aren't met.
type MemberDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberDeleteRequestValidationError) ErrorName() string {
	return "MemberDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MemberDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberDeleteRequestValidationError{}

// Validate checks the field values on MemberDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberDeleteResponseMultiError, or nil if none found.
func (m *MemberDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCrudResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberDeleteResponseValidationError{
					field:  "CrudResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberDeleteResponseValidationError{
					field:  "CrudResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrudResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberDeleteResponseValidationError{
				field:  "CrudResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MemberDeleteResponseMultiError(errors)
	}

	return nil
}

// MemberDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by MemberDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type MemberDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberDeleteResponseMultiError) AllErrors() []error { return m }

// MemberDeleteResponseValidationError is the validation error returned by
// MemberDeleteResponse.Validate if the designated constraints aren't met.
type MemberDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberDeleteResponseValidationError) ErrorName() string {
	return "MemberDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MemberDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberDeleteResponseValidationError{}

// Validate checks the field values on MemberReadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MemberReadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberReadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberReadRequestMultiError, or nil if none found.
func (m *MemberReadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberReadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemberId

	if len(errors) > 0 {
		return MemberReadRequestMultiError(errors)
	}

	return nil
}

// MemberReadRequestMultiError is an error wrapping multiple validation errors
// returned by MemberReadRequest.ValidateAll() if the designated constraints
// aren't met.
type MemberReadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberReadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberReadRequestMultiError) AllErrors() []error { return m }

// MemberReadRequestValidationError is the validation error returned by
// MemberReadRequest.Validate if the designated constraints aren't met.
type MemberReadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberReadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberReadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberReadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberReadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberReadRequestValidationError) ErrorName() string {
	return "MemberReadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MemberReadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberReadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberReadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberReadRequestValidationError{}

// Validate checks the field values on MemberReadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberReadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberReadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberReadResponseMultiError, or nil if none found.
func (m *MemberReadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberReadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCrudResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberReadResponseValidationError{
					field:  "CrudResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberReadResponseValidationError{
					field:  "CrudResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrudResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberReadResponseValidationError{
				field:  "CrudResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberReadResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberReadResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberReadResponseValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MemberReadResponseMultiError(errors)
	}

	return nil
}

// MemberReadResponseMultiError is an error wrapping multiple validation errors
// returned by MemberReadResponse.ValidateAll() if the designated constraints
// aren't met.
type MemberReadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberReadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberReadResponseMultiError) AllErrors() []error { return m }

// MemberReadResponseValidationError is the validation error returned by
// MemberReadResponse.Validate if the designated constraints aren't met.
type MemberReadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberReadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberReadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberReadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberReadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberReadResponseValidationError) ErrorName() string {
	return "MemberReadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MemberReadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberReadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberReadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberReadResponseValidationError{}

// Validate checks the field values on MemberListingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberListingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberListingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberListingRequestMultiError, or nil if none found.
func (m *MemberListingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberListingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberListingRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberListingRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberListingRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MemberListingRequestMultiError(errors)
	}

	return nil
}

// MemberListingRequestMultiError is an error wrapping multiple validation
// errors returned by MemberListingRequest.ValidateAll() if the designated
// constraints aren't met.
type MemberListingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberListingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberListingRequestMultiError) AllErrors() []error { return m }

// MemberListingRequestValidationError is the validation error returned by
// MemberListingRequest.Validate if the designated constraints aren't met.
type MemberListingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberListingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberListingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberListingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberListingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberListingRequestValidationError) ErrorName() string {
	return "MemberListingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MemberListingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberListingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberListingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberListingRequestValidationError{}

// Validate checks the field values on MemberListingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberListingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberListingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberListingResponseMultiError, or nil if none found.
func (m *MemberListingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberListingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCrudResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberListingResponseValidationError{
					field:  "CrudResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberListingResponseValidationError{
					field:  "CrudResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrudResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberListingResponseValidationError{
				field:  "CrudResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetObjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemberListingResponseValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemberListingResponseValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemberListingResponseValidationError{
					field:  fmt.Sprintf("Objects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MemberListingResponseMultiError(errors)
	}

	return nil
}

// MemberListingResponseMultiError is an error wrapping multiple validation
// errors returned by MemberListingResponse.ValidateAll() if the designated
// constraints aren't met.
type MemberListingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberListingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberListingResponseMultiError) AllErrors() []error { return m }

// MemberListingResponseValidationError is the validation error returned by
// MemberListingResponse.Validate if the designated constraints aren't met.
type MemberListingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberListingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberListingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberListingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberListingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberListingResponseValidationError) ErrorName() string {
	return "MemberListingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MemberListingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberListingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberListingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberListingResponseValidationError{}

// Validate checks the field values on MemberListingRequest_ListingFilter with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MemberListingRequest_ListingFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberListingRequest_ListingFilter
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MemberListingRequest_ListingFilterMultiError, or nil if none found.
func (m *MemberListingRequest_ListingFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberListingRequest_ListingFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FullNamePart

	if len(errors) > 0 {
		return MemberListingRequest_ListingFilterMultiError(errors)
	}

	return nil
}

// MemberListingRequest_ListingFilterMultiError is an error wrapping multiple
// validation errors returned by
// MemberListingRequest_ListingFilter.ValidateAll() if the designated
// constraints aren't met.
type MemberListingRequest_ListingFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberListingRequest_ListingFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberListingRequest_ListingFilterMultiError) AllErrors() []error { return m }

// MemberListingRequest_ListingFilterValidationError is the validation error
// returned by MemberListingRequest_ListingFilter.Validate if the designated
// constraints aren't met.
type MemberListingRequest_ListingFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberListingRequest_ListingFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberListingRequest_ListingFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberListingRequest_ListingFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberListingRequest_ListingFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberListingRequest_ListingFilterValidationError) ErrorName() string {
	return "MemberListingRequest_ListingFilterValidationError"
}

// Error satisfies the builtin error interface
func (e MemberListingRequest_ListingFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberListingRequest_ListingFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberListingRequest_ListingFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberListingRequest_ListingFilterValidationError{}
