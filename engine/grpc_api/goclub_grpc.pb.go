// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.28.3
// source: goclub.proto

package grpc_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GoClubAPI_Ping_FullMethodName = "/goclub.engine.v1.GoClubAPI/Ping"
)

// GoClubAPIClient is the client API for GoClubAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoClubAPIClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResponse, error)
}

type goClubAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewGoClubAPIClient(cc grpc.ClientConnInterface) GoClubAPIClient {
	return &goClubAPIClient{cc}
}

func (c *goClubAPIClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, GoClubAPI_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoClubAPIServer is the server API for GoClubAPI service.
// All implementations must embed UnimplementedGoClubAPIServer
// for forward compatibility
type GoClubAPIServer interface {
	Ping(context.Context, *emptypb.Empty) (*PingResponse, error)
	mustEmbedUnimplementedGoClubAPIServer()
}

// UnimplementedGoClubAPIServer must be embedded to have forward compatible implementations.
type UnimplementedGoClubAPIServer struct {
}

func (UnimplementedGoClubAPIServer) Ping(context.Context, *emptypb.Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGoClubAPIServer) mustEmbedUnimplementedGoClubAPIServer() {}

// UnsafeGoClubAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoClubAPIServer will
// result in compilation errors.
type UnsafeGoClubAPIServer interface {
	mustEmbedUnimplementedGoClubAPIServer()
}

func RegisterGoClubAPIServer(s grpc.ServiceRegistrar, srv GoClubAPIServer) {
	s.RegisterService(&GoClubAPI_ServiceDesc, srv)
}

func _GoClubAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoClubAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoClubAPI_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoClubAPIServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GoClubAPI_ServiceDesc is the grpc.ServiceDesc for GoClubAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoClubAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goclub.engine.v1.GoClubAPI",
	HandlerType: (*GoClubAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GoClubAPI_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goclub.proto",
}
