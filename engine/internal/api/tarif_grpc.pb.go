// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: tarif.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Tarifs_TarifCreate_FullMethodName  = "/goclub.engine.v1.Tarifs/TarifCreate"
	Tarifs_TarifUpdate_FullMethodName  = "/goclub.engine.v1.Tarifs/TarifUpdate"
	Tarifs_TarifDelete_FullMethodName  = "/goclub.engine.v1.Tarifs/TarifDelete"
	Tarifs_TarifRead_FullMethodName    = "/goclub.engine.v1.Tarifs/TarifRead"
	Tarifs_TarifListing_FullMethodName = "/goclub.engine.v1.Tarifs/TarifListing"
)

// TarifsClient is the client API for Tarifs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TarifsClient interface {
	TarifCreate(ctx context.Context, in *TarifCreateRequest, opts ...grpc.CallOption) (*TarifCreateResponse, error)
	TarifUpdate(ctx context.Context, in *TarifUpdateRequest, opts ...grpc.CallOption) (*TarifUpdateResponse, error)
	TarifDelete(ctx context.Context, in *TarifDeleteRequest, opts ...grpc.CallOption) (*TarifDeleteResponse, error)
	TarifRead(ctx context.Context, in *TarifReadRequest, opts ...grpc.CallOption) (*TarifReadResponse, error)
	TarifListing(ctx context.Context, in *TarifListingRequest, opts ...grpc.CallOption) (*TarifListingResponse, error)
}

type tarifsClient struct {
	cc grpc.ClientConnInterface
}

func NewTarifsClient(cc grpc.ClientConnInterface) TarifsClient {
	return &tarifsClient{cc}
}

func (c *tarifsClient) TarifCreate(ctx context.Context, in *TarifCreateRequest, opts ...grpc.CallOption) (*TarifCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TarifCreateResponse)
	err := c.cc.Invoke(ctx, Tarifs_TarifCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tarifsClient) TarifUpdate(ctx context.Context, in *TarifUpdateRequest, opts ...grpc.CallOption) (*TarifUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TarifUpdateResponse)
	err := c.cc.Invoke(ctx, Tarifs_TarifUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tarifsClient) TarifDelete(ctx context.Context, in *TarifDeleteRequest, opts ...grpc.CallOption) (*TarifDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TarifDeleteResponse)
	err := c.cc.Invoke(ctx, Tarifs_TarifDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tarifsClient) TarifRead(ctx context.Context, in *TarifReadRequest, opts ...grpc.CallOption) (*TarifReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TarifReadResponse)
	err := c.cc.Invoke(ctx, Tarifs_TarifRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tarifsClient) TarifListing(ctx context.Context, in *TarifListingRequest, opts ...grpc.CallOption) (*TarifListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TarifListingResponse)
	err := c.cc.Invoke(ctx, Tarifs_TarifListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TarifsServer is the server API for Tarifs service.
// All implementations must embed UnimplementedTarifsServer
// for forward compatibility.
type TarifsServer interface {
	TarifCreate(context.Context, *TarifCreateRequest) (*TarifCreateResponse, error)
	TarifUpdate(context.Context, *TarifUpdateRequest) (*TarifUpdateResponse, error)
	TarifDelete(context.Context, *TarifDeleteRequest) (*TarifDeleteResponse, error)
	TarifRead(context.Context, *TarifReadRequest) (*TarifReadResponse, error)
	TarifListing(context.Context, *TarifListingRequest) (*TarifListingResponse, error)
	mustEmbedUnimplementedTarifsServer()
}

// UnimplementedTarifsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTarifsServer struct{}

func (UnimplementedTarifsServer) TarifCreate(context.Context, *TarifCreateRequest) (*TarifCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TarifCreate not implemented")
}
func (UnimplementedTarifsServer) TarifUpdate(context.Context, *TarifUpdateRequest) (*TarifUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TarifUpdate not implemented")
}
func (UnimplementedTarifsServer) TarifDelete(context.Context, *TarifDeleteRequest) (*TarifDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TarifDelete not implemented")
}
func (UnimplementedTarifsServer) TarifRead(context.Context, *TarifReadRequest) (*TarifReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TarifRead not implemented")
}
func (UnimplementedTarifsServer) TarifListing(context.Context, *TarifListingRequest) (*TarifListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TarifListing not implemented")
}
func (UnimplementedTarifsServer) mustEmbedUnimplementedTarifsServer() {}
func (UnimplementedTarifsServer) testEmbeddedByValue()                {}

// UnsafeTarifsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TarifsServer will
// result in compilation errors.
type UnsafeTarifsServer interface {
	mustEmbedUnimplementedTarifsServer()
}

func RegisterTarifsServer(s grpc.ServiceRegistrar, srv TarifsServer) {
	// If the following call pancis, it indicates UnimplementedTarifsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Tarifs_ServiceDesc, srv)
}

func _Tarifs_TarifCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TarifCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TarifsServer).TarifCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tarifs_TarifCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TarifsServer).TarifCreate(ctx, req.(*TarifCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tarifs_TarifUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TarifUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TarifsServer).TarifUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tarifs_TarifUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TarifsServer).TarifUpdate(ctx, req.(*TarifUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tarifs_TarifDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TarifDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TarifsServer).TarifDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tarifs_TarifDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TarifsServer).TarifDelete(ctx, req.(*TarifDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tarifs_TarifRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TarifReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TarifsServer).TarifRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tarifs_TarifRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TarifsServer).TarifRead(ctx, req.(*TarifReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tarifs_TarifListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TarifListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TarifsServer).TarifListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tarifs_TarifListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TarifsServer).TarifListing(ctx, req.(*TarifListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tarifs_ServiceDesc is the grpc.ServiceDesc for Tarifs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tarifs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goclub.engine.v1.Tarifs",
	HandlerType: (*TarifsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TarifCreate",
			Handler:    _Tarifs_TarifCreate_Handler,
		},
		{
			MethodName: "TarifUpdate",
			Handler:    _Tarifs_TarifUpdate_Handler,
		},
		{
			MethodName: "TarifDelete",
			Handler:    _Tarifs_TarifDelete_Handler,
		},
		{
			MethodName: "TarifRead",
			Handler:    _Tarifs_TarifRead_Handler,
		},
		{
			MethodName: "TarifListing",
			Handler:    _Tarifs_TarifListing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tarif.proto",
}
