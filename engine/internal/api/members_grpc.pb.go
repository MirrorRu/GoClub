// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: members.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Members_MemberCreate_FullMethodName  = "/goclub.engine.v1.Members/MemberCreate"
	Members_MemberUpdate_FullMethodName  = "/goclub.engine.v1.Members/MemberUpdate"
	Members_MemberDelete_FullMethodName  = "/goclub.engine.v1.Members/MemberDelete"
	Members_MemberRead_FullMethodName    = "/goclub.engine.v1.Members/MemberRead"
	Members_MemberListing_FullMethodName = "/goclub.engine.v1.Members/MemberListing"
)

// MembersClient is the client API for Members service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MembersClient interface {
	MemberCreate(ctx context.Context, in *MemberCreateRequest, opts ...grpc.CallOption) (*MemberCreateResponse, error)
	MemberUpdate(ctx context.Context, in *MemberUpdateRequest, opts ...grpc.CallOption) (*MemberUpdateResponse, error)
	MemberDelete(ctx context.Context, in *MemberDeleteRequest, opts ...grpc.CallOption) (*MemberDeleteResponse, error)
	MemberRead(ctx context.Context, in *MemberReadRequest, opts ...grpc.CallOption) (*MemberReadResponse, error)
	MemberListing(ctx context.Context, in *MemberListingRequest, opts ...grpc.CallOption) (*MemberListingResponse, error)
}

type membersClient struct {
	cc grpc.ClientConnInterface
}

func NewMembersClient(cc grpc.ClientConnInterface) MembersClient {
	return &membersClient{cc}
}

func (c *membersClient) MemberCreate(ctx context.Context, in *MemberCreateRequest, opts ...grpc.CallOption) (*MemberCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberCreateResponse)
	err := c.cc.Invoke(ctx, Members_MemberCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) MemberUpdate(ctx context.Context, in *MemberUpdateRequest, opts ...grpc.CallOption) (*MemberUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberUpdateResponse)
	err := c.cc.Invoke(ctx, Members_MemberUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) MemberDelete(ctx context.Context, in *MemberDeleteRequest, opts ...grpc.CallOption) (*MemberDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberDeleteResponse)
	err := c.cc.Invoke(ctx, Members_MemberDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) MemberRead(ctx context.Context, in *MemberReadRequest, opts ...grpc.CallOption) (*MemberReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberReadResponse)
	err := c.cc.Invoke(ctx, Members_MemberRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) MemberListing(ctx context.Context, in *MemberListingRequest, opts ...grpc.CallOption) (*MemberListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberListingResponse)
	err := c.cc.Invoke(ctx, Members_MemberListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MembersServer is the server API for Members service.
// All implementations must embed UnimplementedMembersServer
// for forward compatibility.
type MembersServer interface {
	MemberCreate(context.Context, *MemberCreateRequest) (*MemberCreateResponse, error)
	MemberUpdate(context.Context, *MemberUpdateRequest) (*MemberUpdateResponse, error)
	MemberDelete(context.Context, *MemberDeleteRequest) (*MemberDeleteResponse, error)
	MemberRead(context.Context, *MemberReadRequest) (*MemberReadResponse, error)
	MemberListing(context.Context, *MemberListingRequest) (*MemberListingResponse, error)
	mustEmbedUnimplementedMembersServer()
}

// UnimplementedMembersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMembersServer struct{}

func (UnimplementedMembersServer) MemberCreate(context.Context, *MemberCreateRequest) (*MemberCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberCreate not implemented")
}
func (UnimplementedMembersServer) MemberUpdate(context.Context, *MemberUpdateRequest) (*MemberUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberUpdate not implemented")
}
func (UnimplementedMembersServer) MemberDelete(context.Context, *MemberDeleteRequest) (*MemberDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberDelete not implemented")
}
func (UnimplementedMembersServer) MemberRead(context.Context, *MemberReadRequest) (*MemberReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberRead not implemented")
}
func (UnimplementedMembersServer) MemberListing(context.Context, *MemberListingRequest) (*MemberListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberListing not implemented")
}
func (UnimplementedMembersServer) mustEmbedUnimplementedMembersServer() {}
func (UnimplementedMembersServer) testEmbeddedByValue()                 {}

// UnsafeMembersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MembersServer will
// result in compilation errors.
type UnsafeMembersServer interface {
	mustEmbedUnimplementedMembersServer()
}

func RegisterMembersServer(s grpc.ServiceRegistrar, srv MembersServer) {
	// If the following call pancis, it indicates UnimplementedMembersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Members_ServiceDesc, srv)
}

func _Members_MemberCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).MemberCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_MemberCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).MemberCreate(ctx, req.(*MemberCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_MemberUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).MemberUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_MemberUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).MemberUpdate(ctx, req.(*MemberUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_MemberDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).MemberDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_MemberDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).MemberDelete(ctx, req.(*MemberDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_MemberRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).MemberRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_MemberRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).MemberRead(ctx, req.(*MemberReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_MemberListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).MemberListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_MemberListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).MemberListing(ctx, req.(*MemberListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Members_ServiceDesc is the grpc.ServiceDesc for Members service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Members_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goclub.engine.v1.Members",
	HandlerType: (*MembersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MemberCreate",
			Handler:    _Members_MemberCreate_Handler,
		},
		{
			MethodName: "MemberUpdate",
			Handler:    _Members_MemberUpdate_Handler,
		},
		{
			MethodName: "MemberDelete",
			Handler:    _Members_MemberDelete_Handler,
		},
		{
			MethodName: "MemberRead",
			Handler:    _Members_MemberRead_Handler,
		},
		{
			MethodName: "MemberListing",
			Handler:    _Members_MemberListing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "members.proto",
}
