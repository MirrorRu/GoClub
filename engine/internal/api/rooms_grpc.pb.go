// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.28.3
// source: rooms.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Rooms_RoomCreate_FullMethodName  = "/goclub.engine.v1.Rooms/RoomCreate"
	Rooms_RoomUpdate_FullMethodName  = "/goclub.engine.v1.Rooms/RoomUpdate"
	Rooms_RoomDelete_FullMethodName  = "/goclub.engine.v1.Rooms/RoomDelete"
	Rooms_RoomRead_FullMethodName    = "/goclub.engine.v1.Rooms/RoomRead"
	Rooms_RoomListing_FullMethodName = "/goclub.engine.v1.Rooms/RoomListing"
)

// RoomsClient is the client API for Rooms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomsClient interface {
	RoomCreate(ctx context.Context, in *RoomCreateRequest, opts ...grpc.CallOption) (*RoomCreateResponse, error)
	RoomUpdate(ctx context.Context, in *RoomUpdateRequest, opts ...grpc.CallOption) (*RoomUpdateResponse, error)
	RoomDelete(ctx context.Context, in *RoomDeleteRequest, opts ...grpc.CallOption) (*RoomDeleteResponse, error)
	RoomRead(ctx context.Context, in *RoomReadRequest, opts ...grpc.CallOption) (*RoomReadResponse, error)
	RoomListing(ctx context.Context, in *RoomListingRequest, opts ...grpc.CallOption) (*RoomListingResponse, error)
}

type roomsClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomsClient(cc grpc.ClientConnInterface) RoomsClient {
	return &roomsClient{cc}
}

func (c *roomsClient) RoomCreate(ctx context.Context, in *RoomCreateRequest, opts ...grpc.CallOption) (*RoomCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomCreateResponse)
	err := c.cc.Invoke(ctx, Rooms_RoomCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsClient) RoomUpdate(ctx context.Context, in *RoomUpdateRequest, opts ...grpc.CallOption) (*RoomUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomUpdateResponse)
	err := c.cc.Invoke(ctx, Rooms_RoomUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsClient) RoomDelete(ctx context.Context, in *RoomDeleteRequest, opts ...grpc.CallOption) (*RoomDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomDeleteResponse)
	err := c.cc.Invoke(ctx, Rooms_RoomDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsClient) RoomRead(ctx context.Context, in *RoomReadRequest, opts ...grpc.CallOption) (*RoomReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomReadResponse)
	err := c.cc.Invoke(ctx, Rooms_RoomRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsClient) RoomListing(ctx context.Context, in *RoomListingRequest, opts ...grpc.CallOption) (*RoomListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomListingResponse)
	err := c.cc.Invoke(ctx, Rooms_RoomListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomsServer is the server API for Rooms service.
// All implementations must embed UnimplementedRoomsServer
// for forward compatibility
type RoomsServer interface {
	RoomCreate(context.Context, *RoomCreateRequest) (*RoomCreateResponse, error)
	RoomUpdate(context.Context, *RoomUpdateRequest) (*RoomUpdateResponse, error)
	RoomDelete(context.Context, *RoomDeleteRequest) (*RoomDeleteResponse, error)
	RoomRead(context.Context, *RoomReadRequest) (*RoomReadResponse, error)
	RoomListing(context.Context, *RoomListingRequest) (*RoomListingResponse, error)
	mustEmbedUnimplementedRoomsServer()
}

// UnimplementedRoomsServer must be embedded to have forward compatible implementations.
type UnimplementedRoomsServer struct {
}

func (UnimplementedRoomsServer) RoomCreate(context.Context, *RoomCreateRequest) (*RoomCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomCreate not implemented")
}
func (UnimplementedRoomsServer) RoomUpdate(context.Context, *RoomUpdateRequest) (*RoomUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomUpdate not implemented")
}
func (UnimplementedRoomsServer) RoomDelete(context.Context, *RoomDeleteRequest) (*RoomDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomDelete not implemented")
}
func (UnimplementedRoomsServer) RoomRead(context.Context, *RoomReadRequest) (*RoomReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomRead not implemented")
}
func (UnimplementedRoomsServer) RoomListing(context.Context, *RoomListingRequest) (*RoomListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomListing not implemented")
}
func (UnimplementedRoomsServer) mustEmbedUnimplementedRoomsServer() {}

// UnsafeRoomsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomsServer will
// result in compilation errors.
type UnsafeRoomsServer interface {
	mustEmbedUnimplementedRoomsServer()
}

func RegisterRoomsServer(s grpc.ServiceRegistrar, srv RoomsServer) {
	s.RegisterService(&Rooms_ServiceDesc, srv)
}

func _Rooms_RoomCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServer).RoomCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rooms_RoomCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServer).RoomCreate(ctx, req.(*RoomCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rooms_RoomUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServer).RoomUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rooms_RoomUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServer).RoomUpdate(ctx, req.(*RoomUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rooms_RoomDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServer).RoomDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rooms_RoomDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServer).RoomDelete(ctx, req.(*RoomDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rooms_RoomRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServer).RoomRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rooms_RoomRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServer).RoomRead(ctx, req.(*RoomReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rooms_RoomListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServer).RoomListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rooms_RoomListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServer).RoomListing(ctx, req.(*RoomListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rooms_ServiceDesc is the grpc.ServiceDesc for Rooms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rooms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goclub.engine.v1.Rooms",
	HandlerType: (*RoomsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RoomCreate",
			Handler:    _Rooms_RoomCreate_Handler,
		},
		{
			MethodName: "RoomUpdate",
			Handler:    _Rooms_RoomUpdate_Handler,
		},
		{
			MethodName: "RoomDelete",
			Handler:    _Rooms_RoomDelete_Handler,
		},
		{
			MethodName: "RoomRead",
			Handler:    _Rooms_RoomRead_Handler,
		},
		{
			MethodName: "RoomListing",
			Handler:    _Rooms_RoomListing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rooms.proto",
}
